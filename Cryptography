Here's a basic example of a cryptographic code using Python and the Caesar Cipher technique:

*Caesar Cipher Encryption and Decryption*

```
def caesar_encrypt(text, shift):
    result = ""

    for char in text:
        if char.isalpha():
            ascii_offset = 97 if char.islower() else 65
            result += chr((ord(char) - ascii_offset + shift) % 26 + ascii_offset)
        else:
            result += char

    return result

def caesar_decrypt(text, shift):
    return caesar_encrypt(text, -shift)

# Test the code
text = "Hello, World!"
shift = 3

encrypted_text = caesar_encrypt(text, shift)
print(f"Encrypted text: {encrypted_text}")

decrypted_text = caesar_decrypt(encrypted_text, shift)
print(f"Decrypted text: {decrypted_text}")
```

*How it works:*

1. The `caesar_encrypt` function takes a text and a shift value as input.
2. It iterates over each character in the text.
3. If the character is a letter, it applies the Caesar Cipher encryption by shifting the character by the specified value.
4. If the character is not a letter, it leaves it unchanged.
5. The `caesar_decrypt` function is similar, but it shifts the characters in the opposite direction to decrypt the text.

*Advanced Cryptography Techniques:*

For more secure cryptography, consider using:

1. AES (Advanced Encryption Standard) encryption
2. RSA (Rivest-Shamir-Adleman) encryption
3. Hash functions like SHA-256 or MD5

*Python Libraries for Cryptography:*

1. `cryptography` library: A Python library for cryptography that provides a simple and easy-to-use API.
2. `pycryptodome` library: A self-contained Python package of low-level cryptographic primitives.
3. `hashlib` library: A built-in Python library for generating hash values.

Remember to use secure practices when implementing cryptography in your projects.
